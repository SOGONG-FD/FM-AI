name: Build and Deploy with Docker

on:
  push:
    branches:
      - main

env:
  DOCKER_IMAGE: ghcr.io/${{ github.actor }}/deepreport
  VERSION: ${{ github.sha }}
  NAME: deepreport

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker Layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          build-args: |
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            GEMINI_KEY=${{ secrets.GEMINI_KEY }}

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    needs: build
    name: Deploy to EC2
    runs-on: [self-hosted, label-DP]
    steps:
      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Stop and Remove Existing Container
        run: |
          docker stop ${{ env.NAME }} || true
          docker rm ${{ env.NAME }} || true
          docker rmi ${{ env.DOCKER_IMAGE }}:latest || true

      - name: Pull Latest Docker Image
        run: docker pull ${{ env.DOCKER_IMAGE }}:latest

      - name: Run Docker Container
        run: |
          docker run -d -p 8000:8000 \
            --name ${{ env.NAME }} \
            --restart always \
            --log-opt max-size=10m \
            --log-opt max-file=3 \
            -e DATABASE_URL=${{ secrets.DATABASE_URL }} \
            -e GEMINI_KEY=${{ secrets.GEMINI_KEY }} \
            ${{ env.DOCKER_IMAGE }}:latest
